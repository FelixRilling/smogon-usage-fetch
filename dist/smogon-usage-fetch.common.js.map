{"version":3,"file":"smogon-usage-fetch.common.js","sources":["../node_modules/lightdash/dist/esm/src/is/isBlank.js","../node_modules/lightdash/dist/esm/src/array/groupMapReducingBy.js","esm/src/parse/smogon/format.js","esm/src/parse/smogon/timeframe.js","esm/src/http/UrlBuilder.js","esm/src/http/request.js","esm/src/api/chaos.js","esm/src/util/strUtil.js","esm/src/parse/list.js","esm/src/parse/smogon/page/formats.js","esm/src/api/formats.js","esm/src/util/regexUtil.js","esm/src/parse/smogon/convert.js","esm/src/parse/table.js","esm/src/parse/smogon/table.js","esm/src/parse/smogon/usage.js","esm/src/parse/smogon/page/leads.js","esm/src/api/leads.js","esm/src/parse/smogon/page/metagame.js","esm/src/api/metagame.js","esm/src/api/moveset.js","esm/src/parse/smogon/page/timeframes.js","esm/src/api/timeframes.js","esm/src/parse/smogon/page/usage.js","esm/src/api/usage.js"],"sourcesContent":["import { isEmpty } from \"lodash\";\n/**\n * Checks if the string is blank (no non-space content).\n *\n * @since 11.0.0\n * @category Is\n * @param str String to use.\n * @returns If the file is blank.\n * @example\n * isBlank(\"\")\n * // => true\n *\n * isBlank(\"  \")\n * // => true\n *\n * isBlank(\" foo \")\n * // => false\n */\nconst isBlank = (str) => isEmpty(str.trim());\nexport { isBlank };\n//# sourceMappingURL=isBlank.js.map","import { forEach } from \"lodash\";\n/**\n * Collects elements in an array into a an array of merged elements.\n *\n * @since 11.0.0\n * @category Array\n * @param collection Collection to group.\n * @param keyProducer Function returning the key for the value.\n * @param initializer Function initializing a new mergable object.\n * @param reducer Consumer mutating the existing object with the new data.\n * @returns Grouped and merged map.\n * @example\n * groupMapReducingBy(\n *     [\"foo\", \"bar\", \"fizz\", \"buzz\"],\n *     val => val.charAt(0),\n *     () => {\n *        return {\n *            count: 0,\n *            matches: []\n *        };\n *     },\n *     (current, val) => {\n *         current.count++;\n *         current.matches.push(val);\n *         return current;\n *     }\n * )\n * // => Map{\"f\": {count: 2, matches: [\"foo\", \"fizz\"]}, \"b\": {count: 2, matches: [\"bar\", \"buzz\"]}}\n */\nconst groupMapReducingBy = (collection, keyProducer, initializer, reducer) => {\n    const result = new Map();\n    forEach(collection, (value, index) => {\n        const key = keyProducer(value, index, collection);\n        if (!result.has(key)) {\n            result.set(key, initializer(value, index, collection));\n        }\n        result.set(key, reducer(result.get(key), value, index, collection));\n    });\n    return result;\n};\nexport { groupMapReducingBy };\n//# sourceMappingURL=groupMapReducingBy.js.map","import { groupMapReducingBy } from \"lightdash\";\nimport { compact, isNil } from \"lodash\";\n/**\n * @private\n */\nconst RANK_DEFAULT = \"0\";\n/**\n * @private\n */\nconst FORMAT_DELIMITER = \"-\";\n/**\n * @private\n */\nconst FORMAT_ELEMENTS_LOWER_BOUND = 2;\n/**\n * @private\n */\nconst FORMAT_ELEMENTS_UPPER_BOUND = 3;\n/**\n * @private\n */\nconst FORMAT_INDEX_NAME = 0;\n/**\n * @private\n */\nconst FORMAT_INDEX_MONOTYPE = 1;\n/**\n * @private\n */\nconst FORMAT_INDEX_RANK = 2;\n/**\n * @private\n */\nconst FORMAT_INDEX_RANK_ALTERNATE = 1;\n/**\n * Normalizes a rank to \"0\" if it is not set.\n *\n * @private\n * @param rank Rank to normalize\n * @return Normalized rank.\n */\nconst normalizeRank = (rank) => isNil(rank) ? RANK_DEFAULT : rank;\n/**\n * Determines the format data stored in a line.\n *\n * @public\n * @param formatLine Format data line to check.\n * @return Object containing name, rank and optional monotype.\n */\nconst splitFormatDataLine = (formatLine) => {\n    const split = formatLine.split(FORMAT_DELIMITER);\n    if (split.length < FORMAT_ELEMENTS_LOWER_BOUND ||\n        split.length > FORMAT_ELEMENTS_UPPER_BOUND) {\n        throw new Error(`Not a valid format: '${formatLine}', expecting between ${FORMAT_ELEMENTS_LOWER_BOUND} and ${FORMAT_ELEMENTS_UPPER_BOUND} sub-elements but got ${split.length}.`);\n    }\n    const name = split[FORMAT_INDEX_NAME];\n    let monotype;\n    let rank;\n    if (split.length === FORMAT_ELEMENTS_UPPER_BOUND) {\n        monotype = split[FORMAT_INDEX_MONOTYPE];\n        rank = split[FORMAT_INDEX_RANK];\n    }\n    else {\n        monotype = null;\n        rank = split[FORMAT_INDEX_RANK_ALTERNATE];\n    }\n    return { name, rank, monotype };\n};\n/**\n * Joins the sub-elements of format data back in a line.\n *\n * @public\n * @param format Format to use.\n * @return Joined format data line.\n */\nconst joinFormatDataLine = (format) => compact([format.name, format.monotype, normalizeRank(format.rank)]).join(FORMAT_DELIMITER);\n/**\n * Creates a merged list from a full list of formats.\n *\n * @public\n * @param formats Format data to use.\n * @return List of combined formats.\n */\nconst createCombinedFormats = (formats) => Array.from(groupMapReducingBy(formats, (val) => val.name, ({ name }) => {\n    return {\n        name,\n        ranks: [],\n        monotype: [],\n    };\n}, (combinedElement, { rank, monotype }) => {\n    rank = normalizeRank(rank);\n    if (!combinedElement.ranks.includes(rank)) {\n        combinedElement.ranks.push(rank);\n    }\n    if (!isNil(monotype) &&\n        !combinedElement.monotype.includes(monotype)) {\n        combinedElement.monotype.push(monotype);\n    }\n    return combinedElement;\n}).values());\n/**\n * Maps a list of format lines to a full and a combined format list.\n *\n * @private\n * @param formatLines Format lines to use.\n * @return Object containing full and combined formats.\n */\nconst mapFormats = (formatLines) => {\n    const full = formatLines.map(splitFormatDataLine);\n    const combined = createCombinedFormats(full);\n    return { full, combined };\n};\nexport { splitFormatDataLine, joinFormatDataLine, mapFormats, createCombinedFormats, normalizeRank, };\n//# sourceMappingURL=format.js.map","import { groupMapReducingBy } from \"lightdash\";\n/**\n * @private\n */\nconst TIMEFRAME_DELIMITER = \"-\";\n/**\n * @private\n */\nconst TIMEFRAME_ELEMENTS = 2;\n/**\n * @private\n */\nconst TIMEFRAME_INDEX_YEAR = 0;\n/**\n * @private\n */\nconst TIMEFRAME_INDEX_MONTH = 1;\n/**\n * Determines the timeframe data stored in a line.\n *\n * @public\n * @param timeframeLine Timeframe data line to check.\n * @return Object containing year and months.\n */\nconst splitTimeframeDataLine = (timeframeLine) => {\n    const split = timeframeLine.split(TIMEFRAME_DELIMITER);\n    if (split.length !== TIMEFRAME_ELEMENTS) {\n        throw new Error(`Not a valid timeframe: '${timeframeLine}', expecting exactly ${TIMEFRAME_ELEMENTS} sub-elements but got ${split.length}.`);\n    }\n    return {\n        year: split[TIMEFRAME_INDEX_YEAR],\n        month: split[TIMEFRAME_INDEX_MONTH],\n    };\n};\n/**\n * Joins the sub-elements of timeframe data back into a line.\n *\n * @public\n * @param timeframe Timeframe to use.\n * @return Joined timeframe data line.\n */\nconst joinTimeframeDataLine = (timeframe) => [timeframe.year, timeframe.month].join(TIMEFRAME_DELIMITER);\n/**\n * Creates a merged list from a full list of timeframes.\n *\n * @public\n * @param timeframes Timeframe data to use.\n * @return List of combined timeframes.\n */\nconst createCombinedTimeframes = (timeframes) => Array.from(groupMapReducingBy(timeframes, (timeframe) => timeframe.year, ({ year }) => {\n    return { year, months: [] };\n}, (combinedElement, { month }) => {\n    if (!combinedElement.months.includes(month)) {\n        combinedElement.months.push(month);\n    }\n    return combinedElement;\n}).values());\n/**\n * Maps a list of timeframe lines to a full and a combined timeframe list.\n *\n * @private\n * @param timeframeLines Timeframe lines to use.\n * @return Object containing full and combined timeframes.\n */\nconst mapTimeframes = (timeframeLines) => {\n    const full = timeframeLines.map(splitTimeframeDataLine);\n    const combined = createCombinedTimeframes(full);\n    return { combined, full };\n};\nexport { splitTimeframeDataLine, joinTimeframeDataLine, mapTimeframes, createCombinedTimeframes, };\n//# sourceMappingURL=timeframe.js.map","import { joinFormatDataLine } from \"../parse/smogon/format\";\nimport { joinTimeframeDataLine, } from \"../parse/smogon/timeframe\";\n/**\n * @private\n */\nconst DEFAULT_BASE_URL = \"https://www.smogon.com/stats\";\n/**\n * @private\n */\nvar ApiPath;\n(function (ApiPath) {\n    ApiPath[\"MONOTYPE\"] = \"monotype\";\n    ApiPath[\"CHAOS\"] = \"chaos\";\n    ApiPath[\"METAGAME\"] = \"metagame\";\n    ApiPath[\"LEADS\"] = \"leads\";\n})(ApiPath || (ApiPath = {}));\n/**\n * @private\n */\nvar FileType;\n(function (FileType) {\n    FileType[\"TEXT\"] = \"txt\";\n    FileType[\"JSON\"] = \"json\";\n})(FileType || (FileType = {}));\n/**\n * Off-brand path.join().\n *\n * @private\n * @param args URL paths to join.\n * @return Joined URL.\n */\nconst urlJoin = (...args) => args.join(\"/\");\n/**\n * Builder for smogon stat URLs.\n *\n * @private\n * @class\n */\nclass UrlBuilder {\n    setCustomBaseUrl(customBaseUrlPrefix) {\n        this.customBaseUrlPrefix = customBaseUrlPrefix;\n        return this;\n    }\n    setPath(path) {\n        this.path = path;\n        return this;\n    }\n    setFileType(fileType) {\n        this.fileType = fileType;\n        return this;\n    }\n    setTimeframe(timeframe) {\n        this.timeframe = timeframe;\n        return this;\n    }\n    setFormat(format) {\n        this.format = format;\n        return this;\n    }\n    /**\n     * Builds the current instance and returns the URL.\n     *\n     * @public\n     * @return Built URL.\n     */\n    build() {\n        var _a;\n        let url = DEFAULT_BASE_URL;\n        if (this.customBaseUrlPrefix != null) {\n            // We use string addition instead of urlJoin\n            // To give more flexibility over how one wants to prefix\n            url = this.customBaseUrlPrefix + url;\n        }\n        if (this.timeframe != null) {\n            url = urlJoin(url, joinTimeframeDataLine(this.timeframe));\n        }\n        if (((_a = this.format) === null || _a === void 0 ? void 0 : _a.monotype) != null) {\n            url = urlJoin(url, ApiPath.MONOTYPE);\n        }\n        if (this.path != null) {\n            url = urlJoin(url, this.path);\n        }\n        if (this.format != null) {\n            let fileName = joinFormatDataLine(this.format);\n            if (this.fileType != null) {\n                fileName += \".\" + this.fileType;\n            }\n            return urlJoin(url, fileName);\n        }\n        return url;\n    }\n}\nexport { UrlBuilder, ApiPath, FileType };\n//# sourceMappingURL=UrlBuilder.js.map","import axios from \"axios\";\nimport { FileType } from \"./UrlBuilder\";\nconst request = (url, responseType) => {\n    const requestConfig = {\n        timeout: 10000,\n    };\n    if (responseType == FileType.JSON) {\n        requestConfig.responseType = \"json\";\n    }\n    else if (responseType === FileType.TEXT) {\n        requestConfig.responseType = \"text\";\n    }\n    return axios.get(url, requestConfig);\n};\nexport { request };\n//# sourceMappingURL=request.js.map","import { request } from \"../http/request\";\nimport { ApiPath, FileType, UrlBuilder } from \"../http/UrlBuilder\";\n/**\n * Loads the chaos data for a given timeframe and format.\n *\n * @public\n * @param timeframe Timeframe to load.\n * @param format Format to load.\n * @param customBaseUrl Optional, prefixes the fetched URL with this base URL\n * @return Object containing chaos data.\n */\nconst fetchChaos = async (timeframe, format, customBaseUrl) => {\n    const urlBuilder = new UrlBuilder();\n    if (customBaseUrl) {\n        urlBuilder.setCustomBaseUrl(customBaseUrl);\n    }\n    const url = urlBuilder\n        .setPath(ApiPath.CHAOS)\n        .setFileType(FileType.JSON)\n        .setTimeframe(timeframe)\n        .setFormat(format)\n        .build();\n    const response = await request(url, FileType.JSON);\n    return response.data;\n};\nexport { fetchChaos };\n//# sourceMappingURL=chaos.js.map","import { isRegExp } from \"lodash\";\n/**\n * Removes trailing sequences from a string.\n *\n * @private\n * @param str String to use.\n * @param seq Sequence to remove.\n * @return String without trailing sequence.\n */\nconst removeTrailing = (str, seq) => {\n    if (isRegExp(seq)) {\n        return str.replace(seq, \"\");\n    }\n    if (!str.includes(seq)) {\n        return str;\n    }\n    return str.substr(0, str.lastIndexOf(seq));\n};\n/**\n * Removes trailing slashes from a string.\n *\n * @private\n * @param str String to use.\n * @return String without trailing slash.\n */\nconst removeTrailingSlash = (str) => removeTrailing(str, \"/\");\n/**\n * Removes file extension from a string\n *\n * @private\n * @param str String to use.\n * @return String without file extension.\n */\nconst removeExtension = (str) => removeTrailing(str, /\\..+$/);\n/**\n * Checks if a file name is a directory.\n *\n * @private\n * @param str String to check.\n * @return If the file is a directory.\n */\nconst isFile = (str) => !str.endsWith(\"/\");\nexport { isFile, removeTrailing, removeTrailingSlash, removeExtension };\n//# sourceMappingURL=strUtil.js.map","import * as cheerio from \"cheerio\";\n/**\n * @private\n */\nconst PARENT_DIRECTORY_LINK = \"../\";\n/**\n * @private\n */\nconst DIRECTORY_LINK_SELECTOR = \"pre a\";\n/**\n * Parses a list of links from the default apache2 directory listing.\n *\n * @private\n * @param html Html of the directory list.\n * @return List of page entries\n */\nconst parseApacheDirectoryListing = (html) => {\n    const $ = cheerio.load(html);\n    return $(DIRECTORY_LINK_SELECTOR)\n        .map((i, el) => $(el).text()) // Only use link text\n        .get()\n        .filter((text) => text !== PARENT_DIRECTORY_LINK); // Filter out link to parent directory;\n};\nexport { parseApacheDirectoryListing };\n//# sourceMappingURL=list.js.map","import { isFile, removeExtension } from \"../../../util/strUtil\";\nimport { parseApacheDirectoryListing } from \"../../list\";\nimport { mapFormats } from \"../format\";\n/**\n * Parses a smogon format list page.\n *\n * @private\n * @param html HTML of the format list page.\n * @returns Parsed formats.\n */\nconst parseFormatsPage = (html) => mapFormats(parseApacheDirectoryListing(html).filter(isFile).map(removeExtension));\nexport { parseFormatsPage };\n//# sourceMappingURL=formats.js.map","import { request } from \"../http/request\";\nimport { parseFormatsPage } from \"../parse/smogon/page/formats\";\nimport { ApiPath, FileType, UrlBuilder } from \"../http/UrlBuilder\";\n/**\n * Loads a list of all available formats for a given timeframe.\n *\n * @public\n * @param timeframe Timeframe to load.\n * @param useMonotype Optional, If monotype formats should be loaded instead of \"normal\" formats, defaults to false.\n * @param customBaseUrl Optional, prefixes the fetched URL with this base URL\n * @return List of formats.\n */\nconst fetchFormats = async (timeframe, useMonotype = false, customBaseUrl) => {\n    const urlBuilder = new UrlBuilder();\n    urlBuilder.setTimeframe(timeframe);\n    if (useMonotype) {\n        urlBuilder.setPath(ApiPath.MONOTYPE);\n    }\n    if (customBaseUrl) {\n        urlBuilder.setCustomBaseUrl(customBaseUrl);\n    }\n    const url = urlBuilder.build();\n    const response = await request(url, FileType.TEXT);\n    return parseFormatsPage(response.data);\n};\nexport { fetchFormats };\n//# sourceMappingURL=formats.js.map","import { isNil } from \"lodash\";\n/**\n * Matches a regex and gets the group match by its group index.\n *\n * @private\n * @param str String to use.\n * @param regex Regex to match.\n * @param groupIndex Index to get.\n * @return The group result.\n * @throws when the regex does not match or the group is not found.\n */\nconst getMatchGroup = (str, regex, groupIndex) => {\n    if (!regex.test(str)) {\n        throw new Error(`Could not find any match for '${regex.source}' in '${str}'.`);\n    }\n    const match = regex.exec(str);\n    if (isNil(match) || isNil(match[groupIndex])) {\n        throw new Error(`Could not find the match group with index ${groupIndex} for '${regex.source}' in '${str}'.`);\n    }\n    return match[groupIndex];\n};\nexport { getMatchGroup };\n//# sourceMappingURL=regexUtil.js.map","import { getMatchGroup } from \"../../util/regexUtil\";\nimport { removeTrailing } from \"../../util/strUtil\";\n/**\n * @private\n */\nconst PERCENTAGE_UNIT = \"%\";\n/**\n * Converts a string by its identity, not modifying it at all.\n *\n * @private\n * @param str String to use.\n * @return Same string as provided as parameter.\n */\nconst convertIdentity = (str) => str;\n/**\n * Converts a string in the format \"123\" to a number.\n *\n * @private\n * @param str String to use.\n * @return Number.\n */\nconst convertNumber = (str) => Number(str);\n/**\n * Converts a string in the format \"123%\" to a number.\n *\n * @private\n * @param str String to use.\n * @return Frequency number.\n */\nconst convertFrequency = (str) => Number(removeTrailing(str, PERCENTAGE_UNIT));\n/**\n * Converts a line in the format \"foo 12%\" to a pair of name and frequency.\n *\n * @private\n * @param str String to use.\n * @param paddingRegex Optional regex to use for padding checking.\n * @return Frequency pair.\n */\nconst convertFrequencyPair = (str, paddingRegex = /(\\s+)\\d/) => {\n    const padding = getMatchGroup(str, paddingRegex, 0);\n    const splitStr = str.split(padding);\n    return [splitStr[0].trim(), convertFrequency(splitStr[1])];\n};\nexport { convertFrequencyPair, convertFrequency, convertIdentity, convertNumber, };\n//# sourceMappingURL=convert.js.map","import { compact } from \"lodash\";\n/**\n * @private\n */\nconst CELL_DELIMITER = \"|\";\n/**\n * @private\n */\nconst TABLE_HEADER_ROW_INDEX = 1;\n/**\n * @private\n */\nconst TABLE_DATA_ROW_START_INDEX = 3;\n/**\n * @private\n */\nconst TABLE_DATA_ROW_END_OFFSET = 1;\n/**\n * Parses a single markdown table row and returns the values.\n *\n * @private\n * @param row Markdown table row.\n * @return Values of the row.\n */\nconst parseTableRow = (row) => compact(row.split(CELL_DELIMITER).map((str) => str.trim()));\n/**\n * A simple markdown table parser. Designed for a markdown table with a header,\n * containing any amount of rows and columns.\n *\n * @private\n * @param table Markdown table.\n * @return Object containing the table data.\n * @example\n * const table = `+ ---- + ------------------ + --------- + ------ + ------- + ------ + ------- +\n *                | Rank | Pokemon            | Usage %   | Raw    | %       | Real   | %       |\n *                + ---- + ------------------ + --------- + ------ + ------- + ------ + ------- +\n *                | 1    | Skarmory           | 19.96100% | 2252   | 19.961% | 1743   | 21.008% |\n *                | 2    | Gengar             | 19.01259% | 2145   | 19.013% | 1541   | 18.574% |\n *                | 3    | Suicune            | 14.02234% | 1582   | 14.022% | 1165   | 14.042% |\n *                | 4    | Victini            | 13.91597% | 1570   | 13.916% | 1172   | 14.126% |\n *                | 5    | Lucario            | 13.42847% | 1515   | 13.428% | 1073   | 12.933% |\n *                + ---- + ------------------ + --------- + ------ + ------- + ------ + ------- +`;\n *\n * const tableJSON = parseMarkdownTable(str);\n *\n * tableJSON === {\n *     header: [\"Rank\", \"Pokemon\", \"Usage %\", \"Raw\", \"%\", \"Real\", \"%\"],\n *     rows: [\n *         [\"1\", \"Skarmory\", \"19.96100%\", \"2252\", \"19.961%\", \"1743\", \"21.008%\"],\n *         [\"2\", \"Gengar\",   \"19.01259%\", \"2145\", \"19.013%\", \"1541\", \"18.574%\"],\n *         [\"3\", \"Suicune\",  \"14.02234%\", \"1582\", \"14.022%\", \"1165\", \"14.042%\"],\n *         [\"4\", \"Victini\",  \"13.91597%\", \"1570\", \"13.916%\", \"1172\", \"14.126%\"],\n *         [\"5\", \"Lucario\",  \"13.42847%\", \"1515\", \"13.428%\", \"1073\", \"12.933%\"]\n *     ]\n * }\n */\nconst parseMarkdownTable = (table) => {\n    const rows = table.split(\"\\n\");\n    const headerRow = rows[TABLE_HEADER_ROW_INDEX];\n    const dataRows = rows.slice(TABLE_DATA_ROW_START_INDEX, rows.length - 1 - TABLE_DATA_ROW_END_OFFSET);\n    return {\n        header: parseTableRow(headerRow),\n        rows: dataRows.map(parseTableRow),\n    };\n};\nexport { parseMarkdownTable };\n//# sourceMappingURL=table.js.map","import { parseMarkdownTable } from \"../table\";\n/**\n * Parses a smogon markdown table.\n *\n * @private\n * @param table Table to parse.\n * @param currentTableLayout Layout to parse by.\n * @return Parsed table.\n */\nconst parseSmogonTable = (table, currentTableLayout) => {\n    const tableData = parseMarkdownTable(table);\n    const columnLength = tableData.header.length;\n    if (columnLength !== currentTableLayout.length) {\n        throw new Error(`Table does not have the right amount of columns: '${columnLength}' instead of '${currentTableLayout.length}'.`);\n    }\n    return {\n        header: currentTableLayout.map((layoutRow) => layoutRow.name),\n        rows: tableData.rows.map((row) => row.map((field, i) => currentTableLayout[i].converter(field))),\n    };\n};\nexport { parseSmogonTable };\n//# sourceMappingURL=table.js.map","/**\n * @private\n */\nconst HEADER_NAME_POKEMON = \"Pokemon\";\n/**\n * @private\n */\nconst HEADER_NAME_USAGE_PERCENTAGE = \"Usage Percentage\";\n/**\n * @private\n */\nconst HEADER_NAME_USAGE_RAW = \"Usage Raw\";\n/**\n * @private\n */\nconst HEADER_NAME_USAGE_RAW_PERCENTAGE = \"Usage Raw Percentage\";\n/**\n * @private\n */\nconst HEADER_NAME_USAGE_REAL = \"Usage Real\";\n/**\n * @private\n */\nconst HEADER_NAME_USAGE_REAL_PERCENTAGE = \"Usage Real Percentage\";\n/**\n * @private\n */\nconst HEADER_NAME_RANK = \"Rank\";\nexport { HEADER_NAME_POKEMON, HEADER_NAME_USAGE_PERCENTAGE, HEADER_NAME_USAGE_REAL_PERCENTAGE, HEADER_NAME_USAGE_REAL, HEADER_NAME_USAGE_RAW_PERCENTAGE, HEADER_NAME_USAGE_RAW, HEADER_NAME_RANK, };\n//# sourceMappingURL=usage.js.map","import { getMatchGroup } from \"../../../util/regexUtil\";\nimport { convertFrequency, convertIdentity, convertNumber } from \"../convert\";\nimport { parseSmogonTable } from \"../table\";\nimport { HEADER_NAME_POKEMON, HEADER_NAME_RANK, HEADER_NAME_USAGE_PERCENTAGE, HEADER_NAME_USAGE_RAW, HEADER_NAME_USAGE_RAW_PERCENTAGE, } from \"../usage\";\n/**\n * @private\n */\nconst LEADS_TOTAL_ROW_INDEX = 0;\n/**\n * @private\n */\nconst LEADS_TABLE_ROW_OFFSET = 1;\n/**\n * @private\n */\nconst LEADS_TOTAL_REGEX = /Total leads: (-?\\d+)/;\n/**\n * @private\n */\nconst LEADS_TABLE_LAYOUT = [\n    { name: HEADER_NAME_RANK, converter: convertNumber },\n    { name: HEADER_NAME_POKEMON, converter: convertIdentity },\n    {\n        name: HEADER_NAME_USAGE_PERCENTAGE,\n        converter: convertFrequency,\n    },\n    { name: HEADER_NAME_USAGE_RAW, converter: convertNumber },\n    {\n        name: HEADER_NAME_USAGE_RAW_PERCENTAGE,\n        converter: convertFrequency,\n    },\n];\n/**\n * Parses a smogon leads page.\n *\n * @private\n * @param page Page to parse.\n * @return parsed page.\n */\nconst parseLeadsPage = (page) => {\n    const rows = page.split(\"\\n\");\n    const totalRow = rows[LEADS_TOTAL_ROW_INDEX];\n    const tableRows = rows.slice(LEADS_TABLE_ROW_OFFSET);\n    return {\n        total: convertNumber(getMatchGroup(totalRow, LEADS_TOTAL_REGEX, 1)),\n        data: parseSmogonTable(tableRows.join(\"\\n\"), LEADS_TABLE_LAYOUT),\n    };\n};\nexport { parseLeadsPage };\n//# sourceMappingURL=leads.js.map","import { request } from \"../http/request\";\nimport { parseLeadsPage } from \"../parse/smogon/page/leads\";\nimport { ApiPath, FileType, UrlBuilder } from \"../http/UrlBuilder\";\n/**\n * Loads leads data for the given timeframe and format.\n *\n * @public\n * @param timeframe Timeframe to load.\n * @param format Format to load.\n * @param customBaseUrl Optional, prefixes the fetched URL with this base URL\n * @return Leads data.\n */\nconst fetchLeads = async (timeframe, format, customBaseUrl) => {\n    const urlBuilder = new UrlBuilder();\n    if (customBaseUrl) {\n        urlBuilder.setCustomBaseUrl(customBaseUrl);\n    }\n    const url = urlBuilder\n        .setPath(ApiPath.LEADS)\n        .setFileType(FileType.TEXT)\n        .setTimeframe(timeframe)\n        .setFormat(format)\n        .build();\n    const response = await request(url, FileType.TEXT);\n    return parseLeadsPage(response.data);\n};\nexport { fetchLeads };\n//# sourceMappingURL=leads.js.map","import { isBlank } from \"lightdash\";\nimport { getMatchGroup } from \"../../../util/regexUtil\";\nimport { convertFrequency, convertFrequencyPair, convertNumber, } from \"../convert\";\n/**\n * @private\n */\nconst STALLINESS_MEAN_REGEX = / Stalliness \\(mean: (-?[\\d.]+)/;\n/**\n * @private\n */\nconst STALLINESS_ONE_REGEX = / one # = {2}(-?[\\d.]+%)/;\n/**\n * Parses a smogon metagame page.\n *\n * @private\n * @param page Page to parse.\n * @return parsed page.\n */\nconst parseMetagamePage = (page) => {\n    const rows = page.split(\"\\n\");\n    const separatorIndex = rows.findIndex(isBlank);\n    if (separatorIndex === -1) {\n        throw new Error(\"Could not parse Metagame page.\");\n    }\n    const styleRows = rows.slice(0, separatorIndex);\n    const stallinessMeanRow = rows[separatorIndex + 1];\n    const stallinessOneRow = rows[rows.length - 2];\n    return {\n        style: styleRows.map((row) => convertFrequencyPair(row, /(\\.+\\s*)\\d/)),\n        stalliness: {\n            mean: convertNumber(getMatchGroup(stallinessMeanRow, STALLINESS_MEAN_REGEX, 1)),\n            one: convertFrequency(getMatchGroup(stallinessOneRow, STALLINESS_ONE_REGEX, 1)),\n        },\n    };\n};\nexport { parseMetagamePage };\n//# sourceMappingURL=metagame.js.map","import { request } from \"../http/request\";\nimport { parseMetagamePage } from \"../parse/smogon/page/metagame\";\nimport { ApiPath, FileType, UrlBuilder } from \"../http/UrlBuilder\";\n/**\n * Loads metagame data for the given timeframe and format.\n *\n * @public\n * @param timeframe Timeframe to load.\n * @param format Format to load.\n * @param customBaseUrl Optional, prefixes the fetched URL with this base URL\n * @return Metagame data.\n */\nconst fetchMetagame = async (timeframe, format, customBaseUrl) => {\n    const urlBuilder = new UrlBuilder();\n    if (customBaseUrl) {\n        urlBuilder.setCustomBaseUrl(customBaseUrl);\n    }\n    const url = urlBuilder\n        .setPath(ApiPath.METAGAME)\n        .setFileType(FileType.TEXT)\n        .setTimeframe(timeframe)\n        .setFormat(format)\n        .build();\n    const response = await request(url, FileType.TEXT);\n    return parseMetagamePage(response.data);\n};\nexport { fetchMetagame };\n//# sourceMappingURL=metagame.js.map","import { fetchChaos } from \"./chaos\";\n/**\n * Loads moveset data for the given timeframe and format.\n *\n * This is identical to {@link fetchChaos}, as the data they contain are the same, just in different formats.\n *\n * @public\n * @param timeframe Timeframe to load.\n * @param format Format to load.\n * @param customBaseUrl Optional, prefixes the fetched URL with this base URL\n * @return Moveset data.\n */\nconst fetchMoveset = fetchChaos;\nexport { fetchMoveset };\n//# sourceMappingURL=moveset.js.map","import { removeTrailingSlash } from \"../../../util/strUtil\";\nimport { parseApacheDirectoryListing } from \"../../list\";\nimport { mapTimeframes } from \"../timeframe\";\n/**\n * Parses a smogon timeframes list page.\n *\n * @private\n * @param html HTML of the timeframes list page.\n * @returns Parsed timeframes.\n */\nconst parseTimeframesPage = (html) => mapTimeframes(parseApacheDirectoryListing(html).map(removeTrailingSlash));\nexport { parseTimeframesPage };\n//# sourceMappingURL=timeframes.js.map","import { request } from \"../http/request\";\nimport { parseTimeframesPage } from \"../parse/smogon/page/timeframes\";\nimport { FileType, UrlBuilder } from \"../http/UrlBuilder\";\n/**\n * Loads a list of all available timeframes.\n *\n * @public\n * @param customBaseUrl Optional, prefixes the fetched URL with this base URL\n * @return List of timeframe names.\n */\nconst fetchTimeframes = async (customBaseUrl) => {\n    const urlBuilder = new UrlBuilder();\n    if (customBaseUrl) {\n        urlBuilder.setCustomBaseUrl(customBaseUrl);\n    }\n    const url = urlBuilder.build();\n    const response = await request(url, FileType.TEXT);\n    return parseTimeframesPage(response.data);\n};\nexport { fetchTimeframes };\n//# sourceMappingURL=timeframes.js.map","import { getMatchGroup } from \"../../../util/regexUtil\";\nimport { convertFrequency, convertIdentity, convertNumber } from \"../convert\";\nimport { parseSmogonTable } from \"../table\";\nimport { HEADER_NAME_POKEMON, HEADER_NAME_RANK, HEADER_NAME_USAGE_PERCENTAGE, HEADER_NAME_USAGE_RAW, HEADER_NAME_USAGE_RAW_PERCENTAGE, HEADER_NAME_USAGE_REAL, HEADER_NAME_USAGE_REAL_PERCENTAGE, } from \"../usage\";\n/**\n * @private\n */\nconst USAGE_TOTAL_ROW_INDEX = 0;\n/**\n * @private\n */\nconst USAGE_WEIGHT_ROW_INDEX = 1;\n/**\n * @private\n */\nconst USAGE_TABLE_ROW_OFFSET = 2;\n/**\n * @private\n */\nconst USAGE_TOTAL_REGEX = /Total battles: (-?\\d+)/;\n/**\n * @private\n */\nconst USAGE_WEIGHT_REGEX = /Avg\\. weight\\/team: (-?[\\d.]+)/;\n/**\n * @private\n */\nconst USAGE_TABLE_LAYOUT = [\n    { name: HEADER_NAME_RANK, converter: convertNumber },\n    { name: HEADER_NAME_POKEMON, converter: convertIdentity },\n    {\n        name: HEADER_NAME_USAGE_PERCENTAGE,\n        converter: convertFrequency,\n    },\n    { name: HEADER_NAME_USAGE_RAW, converter: convertNumber },\n    {\n        name: HEADER_NAME_USAGE_RAW_PERCENTAGE,\n        converter: convertFrequency,\n    },\n    { name: HEADER_NAME_USAGE_REAL, converter: convertNumber },\n    {\n        name: HEADER_NAME_USAGE_REAL_PERCENTAGE,\n        converter: convertFrequency,\n    },\n];\n/**\n * Parses a smogon usage page.\n *\n * @private\n * @param page Page to parse.\n * @return parsed page.\n */\nconst parseUsagePage = (page) => {\n    const rows = page.split(\"\\n\");\n    const totalRow = rows[USAGE_TOTAL_ROW_INDEX];\n    const weightRow = rows[USAGE_WEIGHT_ROW_INDEX];\n    const tableRows = rows.slice(USAGE_TABLE_ROW_OFFSET);\n    return {\n        total: convertNumber(getMatchGroup(totalRow, USAGE_TOTAL_REGEX, 1)),\n        weight: convertNumber(getMatchGroup(weightRow, USAGE_WEIGHT_REGEX, 1)),\n        data: parseSmogonTable(tableRows.join(\"\\n\"), USAGE_TABLE_LAYOUT),\n    };\n};\nexport { parseUsagePage };\n//# sourceMappingURL=usage.js.map","import { request } from \"../http/request\";\nimport { parseUsagePage } from \"../parse/smogon/page/usage\";\nimport { FileType, UrlBuilder } from \"../http/UrlBuilder\";\n/**\n * Loads usage data for the given timeframe and format.\n *\n * @public\n * @param timeframe Timeframe to load.\n * @param format Format to load.\n * @param customBaseUrl Optional, prefixes the fetched URL with this base URL\n * @return Usage data.\n */\nconst fetchUsage = async (timeframe, format, customBaseUrl) => {\n    const urlBuilder = new UrlBuilder();\n    if (customBaseUrl) {\n        urlBuilder.setCustomBaseUrl(customBaseUrl);\n    }\n    const url = urlBuilder\n        .setFileType(FileType.TEXT)\n        .setTimeframe(timeframe)\n        .setFormat(format)\n        .build();\n    const response = await request(url, FileType.TEXT);\n    return parseUsagePage(response.data);\n};\nexport { fetchUsage };\n//# sourceMappingURL=usage.js.map"],"names":["isEmpty","forEach","isNil","compact","isRegExp","cheerio.load"],"mappings":"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"}